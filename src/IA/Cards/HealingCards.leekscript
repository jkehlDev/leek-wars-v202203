// _______________________________________________________________________________________________________
function GBL_Resolve_HEAL_EMERGENCY(_target_cell) {
	_IA_cards['HEAL'].run(
		0,
		[],
		new Contract(
			null,
			GBL_Contract_types.TARGET,
			[
				GBL_Contract_filters.HAS_TARGETS_Q1(LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER),
				GBL_Contract_filters.TARGETS_ONLY(LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER | LEEK_TYPE_ALLY_SUMMON),
				GBL_Contract_filters.EFFECTS_OR([{
					_target_type: LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER,
					_effect_type: EFFECT_HEAL,
					_minValue: 50,
					_maxValue: 10000
				}]),
			],
			[
				GBL_Contract_sorters.EFFECT_DSC({
					_target_type: LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER,
					_effect_type: EFFECT_HEAL
				}),
				_target_cell !== null ? GBL_Contract_sorters.DIST_CAST_ASC_TO(_target_cell) : GBL_Contract_sorters.TARGET_SAFEST(),
			]),
		[
			new Contract(
				CHIP_KNOWLEDGE,
				GBL_Contract_types.ON_ME,
				[
					GBL_Contract_filters.TARGETS_ONLY(LEEK_TYPE_ALLY_CASTER),
				],
				[]),
			new Contract(
				CHIP_REGENERATION,
				GBL_Contract_types.TARGET,
				[
					GBL_Contract_filters.HAS_TARGETS_Q1(LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER),
					GBL_Contract_filters.TARGETS_ONLY(LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER),
					GBL_Contract_filters.EFFECTS_OR([{
						_target_type: LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER,
						_effect_type: EFFECT_HEAL,
						_minValue: 500,
						_maxValue: 10000
					}]),
				],
				[
					GBL_Contract_sorters.EFFECT_DSC({
						_target_type: LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER,
						_effect_type: EFFECT_HEAL
					}),
					_target_cell !== null ? GBL_Contract_sorters.DIST_CAST_ASC_TO(_target_cell) : GBL_Contract_sorters.TARGET_SAFEST(),
				]),
			new Contract(
				CHIP_VAMPIRIZATION,
				GBL_Contract_types.TARGET,
				[
					GBL_Contract_filters.HAS_TARGETS_Q1(LEEK_TYPE_ALLY_CASTER),
					GBL_Contract_filters.TARGETS_ONLY(LEEK_TYPE_ENEMY | LEEK_TYPE_ENEMY_SUMMON | LEEK_TYPE_ALLY_CASTER),
					GBL_Contract_filters.EFFECTS_OR([{
						_target_type: LEEK_TYPE_ALLY_CASTER,
						_effect_type: EFFECT_HEAL,
						_minValue: 200,
						_maxValue: 20000
					}]),
				],
				[
					GBL_Contract_sorters.EFFECT_DSC({
						_target_type: LEEK_TYPE_ALLY_CASTER,
						_effect_type: EFFECT_HEAL
					}),
					_target_cell !== null ? GBL_Contract_sorters.DIST_CAST_ASC_TO(_target_cell) : GBL_Contract_sorters.TARGET_SAFEST(),
				]),
			new Contract(
				CHIP_THERAPY,
				GBL_Contract_types.TARGET,
				[
					GBL_Contract_filters.HAS_TARGETS_Q1(LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER),
					GBL_Contract_filters.TARGETS_ONLY(LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER | LEEK_TYPE_ALLY_SUMMON),
					GBL_Contract_filters.EFFECTS_OR([{
						_target_type: LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER,
						_effect_type: EFFECT_HEAL,
						_minValue: 100,
						_maxValue: 20000
					}]),
				],
				[
					GBL_Contract_sorters.EFFECT_DSC({
						_target_type: LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER,
						_effect_type: EFFECT_HEAL
					}),
					_target_cell !== null ? GBL_Contract_sorters.DIST_CAST_ASC_TO(_target_cell) : GBL_Contract_sorters.TARGET_SAFEST(),
				])
		]
	);
}
// _______________________________________________________________________________________________________
function GBL_Resolve_HEAL_WARN(_target_cell) {
	_IA_cards['HEAL_2'].run(
		0,
		[],
		new Contract(
			null,
			GBL_Contract_types.TARGET,
			[
				GBL_Contract_filters.HAS_TARGETS_Q3(LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER),
				GBL_Contract_filters.TARGETS_ONLY(LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER | LEEK_TYPE_ALLY_SUMMON),
				GBL_Contract_filters.EFFECTS_OR([{
					_target_type: LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER,
					_effect_type: EFFECT_HEAL,
					_minValue: 50,
					_maxValue: 10000
				}]),
			],
			[
				GBL_Contract_sorters.EFFECT_DSC({
					_target_type: LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER,
					_effect_type: EFFECT_HEAL
				}),
				_target_cell !== null ? GBL_Contract_sorters.DIST_CAST_ASC_TO(_target_cell) : GBL_Contract_sorters.TARGET_SAFEST(),
			]),
		[
			new Contract(
				CHIP_KNOWLEDGE,
				GBL_Contract_types.ON_ME,
				[
					GBL_Contract_filters.TARGETS_ONLY(LEEK_TYPE_ALLY_CASTER),
				],
				[]),
			new Contract(
				CHIP_VAMPIRIZATION,
				GBL_Contract_types.TARGET,
				[
					GBL_Contract_filters.HAS_TARGETS_Q3(LEEK_TYPE_ALLY_CASTER),
					GBL_Contract_filters.TARGETS_ONLY(LEEK_TYPE_ENEMY | LEEK_TYPE_ENEMY_SUMMON | LEEK_TYPE_ALLY_CASTER),
					GBL_Contract_filters.EFFECTS_OR([{
						_target_type: LEEK_TYPE_ALLY_CASTER,
						_effect_type: EFFECT_HEAL,
						_minValue: 200,
						_maxValue: 20000
					}]),
				],
				[
					GBL_Contract_sorters.EFFECT_DSC({
						_target_type: LEEK_TYPE_ALLY_CASTER,
						_effect_type: EFFECT_HEAL
					}),
					_target_cell !== null ? GBL_Contract_sorters.DIST_CAST_ASC_TO(_target_cell) : GBL_Contract_sorters.TARGET_SAFEST(),
				]),
			new Contract(
				CHIP_THERAPY,
				GBL_Contract_types.TARGET,
				[
					GBL_Contract_filters.HAS_TARGETS_Q2(LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER),
					GBL_Contract_filters.TARGETS_ONLY(LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER | LEEK_TYPE_ALLY_SUMMON),
					GBL_Contract_filters.EFFECTS_OR([{
						_target_type: LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER,
						_effect_type: EFFECT_HEAL,
						_minValue: 100,
						_maxValue: 20000
					}]),
				],
				[
					GBL_Contract_sorters.EFFECT_DSC({
						_target_type: LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER,
						_effect_type: EFFECT_HEAL
					}),
					_target_cell !== null ? GBL_Contract_sorters.DIST_CAST_ASC_TO(_target_cell) : GBL_Contract_sorters.TARGET_SAFEST(),
				]),
			new Contract(
				CHIP_REMISSION,
				GBL_Contract_types.TARGET,
				[
					GBL_Contract_filters.HAS_TARGETS_Q2(LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER),
					GBL_Contract_filters.TARGETS_ONLY(LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER | LEEK_TYPE_ALLY_SUMMON),
					GBL_Contract_filters.EFFECTS_OR([{
						_target_type: LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER,
						_effect_type: EFFECT_HEAL,
						_minValue: 50,
						_maxValue: 10000
					}]),
				],
				[
					GBL_Contract_sorters.EFFECT_DSC({
						_target_type: LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER,
						_effect_type: EFFECT_HEAL
					}),
					_target_cell !== null ? GBL_Contract_sorters.DIST_CAST_ASC_TO(_target_cell) : GBL_Contract_sorters.TARGET_SAFEST(),
				]),
		]
	);
}
// _______________________________________________________________________________________________________
function GBL_Resolve_HEAL_ANTIDOTE(_target_cell) {
	_IA_cards['HEAL_ANTIDOTE'].run(
		0,
		[],
		new Contract(
			null,
			GBL_Contract_types.TARGET,
			[
				GBL_Contract_filters.TARGETS_ONLY(LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_SUMMON | LEEK_TYPE_ALLY_CASTER),
				GBL_Contract_filters.HAS_TARGETS_POISONED(LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER),
			],
			[
				GBL_Contract_sorters.TARGET_EFFECT_DSC({
					_target_type: LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER,
					_effect_type: EFFECT_POISON
				}),
				_target_cell !== null ? GBL_Contract_sorters.DIST_CAST_ASC_TO(_target_cell) : GBL_Contract_sorters.TARGET_SAFEST(),
			]),
		[
			new Contract(
				CHIP_ANTIDOTE,
				GBL_Contract_types.TARGET,
				[
					GBL_Contract_filters.TARGETS_ONLY(LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_SUMMON | LEEK_TYPE_ALLY_CASTER),
					GBL_Contract_filters.HAS_TARGETS_POISONED(LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER),
				],
				[
					GBL_Contract_sorters.TARGET_EFFECT_DSC({
						_target_type: LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER,
						_effect_type: EFFECT_POISON
					}),
					GBL_Contract_sorters.TARGET_LIFE_ASC(LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER),
					_target_cell !== null ? GBL_Contract_sorters.DIST_CAST_ASC_TO(_target_cell) : GBL_Contract_sorters.TARGET_SAFEST(),
				]),
			new Contract(
				CHIP_LIBERATION,
				GBL_Contract_types.TARGET,
				[
					GBL_Contract_filters.TARGETS_ONLY(LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_SUMMON | LEEK_TYPE_ALLY_CASTER),
					GBL_Contract_filters.HAS_TARGETS_POISONED(LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER),
				],
				[
					GBL_Contract_sorters.TARGET_EFFECT_DSC({
						_target_type: LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER,
						_effect_type: EFFECT_POISON
					}),
					GBL_Contract_sorters.TARGET_LIFE_ASC(LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER),
					_target_cell !== null ? GBL_Contract_sorters.DIST_CAST_ASC_TO(_target_cell) : GBL_Contract_sorters.TARGET_SAFEST(),
				])
		]
	);
}
// _______________________________________________________________________________________________________
function GBL_Resolve_HEAL_REGEN(_target_cell) {
	_IA_cards['HEAL_REGEN'].run(
		0,
		[],
		new Contract(
			null,
			GBL_Contract_types.TARGET,
			[
				GBL_Contract_filters.TARGETS_ONLY(LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_SUMMON | LEEK_TYPE_ALLY_CASTER),
			],
			[
				GBL_Contract_sorters.TARGET_EFFECT_DSC({
					_target_type: LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER,
					_effect_type: EFFECT_POISON
				}),
				GBL_Contract_sorters.EFFECT_DSC({
					_target_type: LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER,
					_effect_type: EFFECT_HEAL
				}),
				_target_cell !== null ? GBL_Contract_sorters.DIST_CAST_ASC_TO(_target_cell) : GBL_Contract_sorters.TARGET_SAFEST(),
			]),
		[
			new Contract(
				CHIP_KNOWLEDGE,
				GBL_Contract_types.ON_ME,
				[
					GBL_Contract_filters.TARGETS_ONLY(LEEK_TYPE_ALLY_CASTER),
				],
				[])
		]
	);
}
// _______________________________________________________________________________________________________