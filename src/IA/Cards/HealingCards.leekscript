// -- --------------------------------------------------------------------------------------------------
function GBL_Resolve_HEAL_EMERGENCY(_target_cell) {
	var _selectedOptions = _IA_cards['HEAL'].getOptionsBy(
		[GBL_filter_toolCardOption_by_cost(myLeek().leek_tp)],
		GBL_sort_toolCardOption_by_cost_dsc, []);
	var _isExecuted = false;
	var _excludeTools = [];
	var _currentOption, _tool_id, _contract, _contract_options;
	while (count(_selectedOptions) > 0 && !_isExecuted) {
		_currentOption = shift(_selectedOptions);
		for (_tool_id in _currentOption._cast_array) {
			if (_tool_id === CHIP_KNOWLEDGE) {
				_contract = new Contract(
					_tool_id,
					GBL_Contract_types.ON_ME,
					[
						GBL_Contract_filters.TARGETS_ONLY(LEEK_TYPE_ALLY_CASTER),
					],
					[]);
			} else
			if (_tool_id === CHIP_REGENERATION) {
				_contract = new Contract(
					_tool_id,
					GBL_Contract_types.TARGET,
					[
						GBL_Contract_filters.HAS_TARGETS_Q1(LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER),
						GBL_Contract_filters.TARGETS_ONLY(LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER),
						GBL_Contract_filters.EFFECTS_OR([{
							_target_type: LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER,
							_effect_type: EFFECT_HEAL,
							_minValue: 500,
							_maxValue: 10000
						}]),
					],
					[
						GBL_Contract_sorters.EFFECT_DSC({
							_target_type: LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER,
							_effect_type: EFFECT_HEAL
						}),
						_target_cell !== null ? GBL_Contract_sorters.DIST_CAST_ASC_TO(_target_cell) : GBL_Contract_sorters.TARGET_SAFEST(),
					]);
			} else
			if (_tool_id === CHIP_VAMPIRIZATION) {
				_contract = new Contract(
					_tool_id,
					GBL_Contract_types.TARGET,
					[
						GBL_Contract_filters.HAS_TARGETS_Q1(LEEK_TYPE_ALLY_CASTER),
						GBL_Contract_filters.TARGETS_ONLY(LEEK_TYPE_ENEMY | LEEK_TYPE_ENEMY_SUMMON | LEEK_TYPE_ALLY_CASTER),
						GBL_Contract_filters.EFFECTS_OR([{
							_target_type: LEEK_TYPE_ALLY_CASTER,
							_effect_type: EFFECT_HEAL,
							_minValue: 200,
							_maxValue: 20000
						}]),
					],
					[
						GBL_Contract_sorters.EFFECT_DSC({
							_target_type: LEEK_TYPE_ALLY_CASTER,
							_effect_type: EFFECT_HEAL
						}),
						_target_cell !== null ? GBL_Contract_sorters.DIST_CAST_ASC_TO(_target_cell) : GBL_Contract_sorters.TARGET_SAFEST(),
					]);
			} else if (_tool_id === CHIP_THERAPY) {
				_contract = new Contract(
					_tool_id,
					GBL_Contract_types.TARGET,
					[
						GBL_Contract_filters.HAS_TARGETS_Q1(LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER),
						GBL_Contract_filters.TARGETS_ONLY(LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER | LEEK_TYPE_ALLY_SUMMON),
						GBL_Contract_filters.EFFECTS_OR([{
							_target_type: LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER,
							_effect_type: EFFECT_HEAL,
							_minValue: 100,
							_maxValue: 20000
						}]),
					],
					[
						GBL_Contract_sorters.EFFECT_DSC({
							_target_type: LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER,
							_effect_type: EFFECT_HEAL
						}),
						_target_cell !== null ? GBL_Contract_sorters.DIST_CAST_ASC_TO(_target_cell) : GBL_Contract_sorters.TARGET_SAFEST(),
					]);
			} else {
				_contract = new Contract(
					_tool_id,
					GBL_Contract_types.TARGET,
					[
						GBL_Contract_filters.HAS_TARGETS_Q1(LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER),
						GBL_Contract_filters.TARGETS_ONLY(LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER | LEEK_TYPE_ALLY_SUMMON),
						GBL_Contract_filters.EFFECTS_OR([{
							_target_type: LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER,
							_effect_type: EFFECT_HEAL,
							_minValue: 50,
							_maxValue: 10000
						}]),
					],
					[
						GBL_Contract_sorters.EFFECT_DSC({
							_target_type: LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER,
							_effect_type: EFFECT_HEAL
						}),
						_target_cell !== null ? GBL_Contract_sorters.DIST_CAST_ASC_TO(_target_cell) : GBL_Contract_sorters.TARGET_SAFEST(),
					]);
			}

			_contract_options = FCT_ResolveContractOptions(_contract);
			if (count(_contract_options) > 0) {
				_isExecuted = true;
				shift(_contract_options).use();
			} else {
				_isExecuted = false;
				push(_excludeTools, _tool_id);
				_selectedOptions = _IA_cards['HEAL'].getOptionsBy(
					[GBL_filter_toolCardOption_by_cost(myLeek().leek_tp)],
					GBL_sort_toolCardOption_by_cost_dsc, _excludeTools);
				break;
			}
		}
	}
}
// -- --------------------------------------------------------------------------------------------------
function GBL_Resolve_HEAL_WARN(_target_cell) {
	var _selectedOptions = _IA_cards['HEAL_2'].getOptionsBy(
		[GBL_filter_toolCardOption_by_cost(myLeek().leek_tp)],
		GBL_sort_toolCardOption_by_cost_dsc, []);
	var _isExecuted = false;
	var _excludeTools = [];
	var _currentOption, _tool_id, _contract, _contract_options;
	while (count(_selectedOptions) > 0 && !_isExecuted) {
		_currentOption = shift(_selectedOptions);
		for (_tool_id in _currentOption._cast_array) {
			if (_tool_id === CHIP_KNOWLEDGE) {
				_contract = new Contract(
					_tool_id,
					GBL_Contract_types.ON_ME,
					[
						GBL_Contract_filters.TARGETS_ONLY(LEEK_TYPE_ALLY_CASTER),
					],
					[]);
			} else
			if (_tool_id === CHIP_VAMPIRIZATION) {
				_contract = new Contract(
					_tool_id,
					GBL_Contract_types.TARGET,
					[
						GBL_Contract_filters.HAS_TARGETS_Q3(LEEK_TYPE_ALLY_CASTER),
						GBL_Contract_filters.TARGETS_ONLY(LEEK_TYPE_ENEMY | LEEK_TYPE_ENEMY_SUMMON | LEEK_TYPE_ALLY_CASTER),
						GBL_Contract_filters.EFFECTS_OR([{
							_target_type: LEEK_TYPE_ALLY_CASTER,
							_effect_type: EFFECT_HEAL,
							_minValue: 100,
							_maxValue: 20000
						}]),
					],
					[
						GBL_Contract_sorters.EFFECT_DSC({
							_target_type: LEEK_TYPE_ALLY_CASTER,
							_effect_type: EFFECT_HEAL
						}),
						_target_cell !== null ? GBL_Contract_sorters.DIST_CAST_ASC_TO(_target_cell) : GBL_Contract_sorters.TARGET_SAFEST(),
					]);
			} else if (_tool_id === CHIP_THERAPY) {
				_contract = new Contract(
					_tool_id,
					GBL_Contract_types.TARGET,
					[
						GBL_Contract_filters.TARGETS_ONLY(LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_SUMMON | LEEK_TYPE_ALLY_CASTER),
						GBL_Contract_filters.EFFECTS_OR([{
							_target_type: LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER,
							_effect_type: EFFECT_HEAL,
							_minValue: 150,
							_maxValue: 20000
						}]),
					],
					[
						GBL_Contract_sorters.EFFECT_DSC({
							_target_type: LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER,
							_effect_type: EFFECT_HEAL
						}),
						_target_cell !== null ? GBL_Contract_sorters.DIST_CAST_ASC_TO(_target_cell) : GBL_Contract_sorters.TARGET_SAFEST(),
					]);
			} else {
				_contract = new Contract(
					_tool_id,
					GBL_Contract_types.TARGET,
					[
						GBL_Contract_filters.TARGETS_ONLY(LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_SUMMON | LEEK_TYPE_ALLY_CASTER),
						GBL_Contract_filters.EFFECTS_OR([{
							_target_type: LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER,
							_effect_type: EFFECT_HEAL,
							_minValue: 25,
							_maxValue: 10000
						}]),
					],
					[
						GBL_Contract_sorters.EFFECT_DSC({
							_target_type: LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER,
							_effect_type: EFFECT_HEAL
						}),
						_target_cell !== null ? GBL_Contract_sorters.DIST_CAST_ASC_TO(_target_cell) : GBL_Contract_sorters.TARGET_SAFEST(),
					]);
			}
			_contract_options = FCT_ResolveContractOptions(_contract);
			if (count(_contract_options) > 0) {
				_isExecuted = true;
				shift(_contract_options).use();
			} else {
				_isExecuted = false;
				push(_excludeTools, _tool_id);
				_selectedOptions = _IA_cards['HEAL_2'].getOptionsBy(
					[GBL_filter_toolCardOption_by_cost(myLeek().leek_tp)],
					GBL_sort_toolCardOption_by_cost_dsc, _excludeTools);
				break;
			}
		}
	}
}
// -- --------------------------------------------------------------------------------------------------
function GBL_Resolve_HEAL_ANTIDOTE(_target_cell) {
	var _selectedOptions = _IA_cards['HEAL_ANTIDOTE'].getOptionsBy(
		[GBL_filter_toolCardOption_by_cost(myLeek().leek_tp)],
		GBL_sort_toolCardOption_by_cost_dsc, []);
	var _isExecuted = false;
	var _excludeTools = [];
	var _currentOption, _tool_id, _contract, _contract_options;
	while (count(_selectedOptions) > 0 && !_isExecuted) {
		_currentOption = shift(_selectedOptions);
		for (_tool_id in _currentOption._cast_array) {
			if (_tool_id === CHIP_ANTIDOTE) {
				_contract = new Contract(
					_tool_id,
					GBL_Contract_types.TARGET,
					[
						GBL_Contract_filters.TARGETS_ONLY(LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_SUMMON | LEEK_TYPE_ALLY_CASTER),
						GBL_Contract_filters.HAS_TARGETS_POISONED(LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER),
					],
					[
						GBL_Contract_sorters.TARGET_EFFECT_DSC({
							_target_type: LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER,
							_effect_type: EFFECT_POISON
						}),
						GBL_Contract_sorters.TARGET_LIFE_ASC(LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER),
						_target_cell !== null ? GBL_Contract_sorters.DIST_CAST_ASC_TO(_target_cell) : GBL_Contract_sorters.TARGET_SAFEST(),
					]);
			} else if (_tool_id === CHIP_LIBERATION) {
				_contract = new Contract(
					_tool_id,
					GBL_Contract_types.TARGET,
					[
						GBL_Contract_filters.TARGETS_ONLY(LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_SUMMON | LEEK_TYPE_ALLY_CASTER),
						GBL_Contract_filters.HAS_TARGETS_POISONED(LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER),
					],
					[
						GBL_Contract_sorters.TARGET_EFFECT_DSC({
							_target_type: LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER,
							_effect_type: EFFECT_POISON
						}),
						GBL_Contract_sorters.TARGET_LIFE_ASC(LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER),
						_target_cell !== null ? GBL_Contract_sorters.DIST_CAST_ASC_TO(_target_cell) : GBL_Contract_sorters.TARGET_SAFEST(),
					]);
			} else {
				_contract = new Contract(
					_tool_id,
					GBL_Contract_types.TARGET,
					[
						GBL_Contract_filters.TARGETS_ONLY(LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_SUMMON | LEEK_TYPE_ALLY_CASTER),
						GBL_Contract_filters.HAS_TARGETS_POISONED(LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER),
					],
					[
						GBL_Contract_sorters.TARGET_EFFECT_DSC({
							_target_type: LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER,
							_effect_type: EFFECT_POISON
						}),
						_target_cell !== null ? GBL_Contract_sorters.DIST_CAST_ASC_TO(_target_cell) : GBL_Contract_sorters.TARGET_SAFEST(),
					]);
			}
			_contract_options = FCT_ResolveContractOptions(_contract);
			if (count(_contract_options) > 0) {
				_isExecuted = true;
				shift(_contract_options).use();
			} else {
				_isExecuted = false;
				push(_excludeTools, _tool_id);
				_selectedOptions = _IA_cards['HEAL_ANTIDOTE'].getOptionsBy(
					[GBL_filter_toolCardOption_by_cost(myLeek().leek_tp)],
					GBL_sort_toolCardOption_by_cost_dsc, _excludeTools);
				break;
			}
		}
	}
}
// -- --------------------------------------------------------------------------------------------------
function GBL_Resolve_HEAL_REGEN(_target_cell) {
	var _selectedOptions = _IA_cards['HEAL_REGEN'].getOptionsBy(
		[GBL_filter_toolCardOption_by_cost(myLeek().leek_tp)],
		GBL_sort_toolCardOption_by_cost_dsc, []);
	var _isExecuted = false;
	var _excludeTools = [];
	var _currentOption, _tool_id, _contract, _contract_options;
	while (count(_selectedOptions) > 0 && !_isExecuted) {
		_currentOption = shift(_selectedOptions);
		for (_tool_id in _currentOption._cast_array) {
			if (_tool_id === CHIP_KNOWLEDGE) {
				_contract = new Contract(
					_tool_id,
					GBL_Contract_types.ON_ME,
					[
						GBL_Contract_filters.TARGETS_ONLY(LEEK_TYPE_ALLY_CASTER),
					],
					[]);
			} else {
				_contract = new Contract(
					_tool_id,
					GBL_Contract_types.TARGET,
					[
						GBL_Contract_filters.TARGETS_ONLY(LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_SUMMON | LEEK_TYPE_ALLY_CASTER),
					],
					[
						GBL_Contract_sorters.TARGET_EFFECT_DSC({
							_target_type: LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER,
							_effect_type: EFFECT_POISON
						}),
						GBL_Contract_sorters.EFFECT_DSC({
							_target_type: LEEK_TYPE_ALLY | LEEK_TYPE_ALLY_CASTER,
							_effect_type: EFFECT_HEAL
						}),
						_target_cell !== null ? GBL_Contract_sorters.DIST_CAST_ASC_TO(_target_cell) : GBL_Contract_sorters.TARGET_SAFEST(),
					]);
			}
			_contract_options = FCT_ResolveContractOptions(_contract);
			if (count(_contract_options) > 0) {
				_isExecuted = true;
				shift(_contract_options).use();
			} else {
				_isExecuted = false;
				push(_excludeTools, _tool_id);
				_selectedOptions = _IA_cards['HEAL_REGEN'].getOptionsBy(
					[GBL_filter_toolCardOption_by_cost(myLeek().leek_tp)],
					GBL_sort_toolCardOption_by_cost_dsc, _excludeTools);
				break;
			}
		}
	}
}
// -- --------------------------------------------------------------------------------------------------