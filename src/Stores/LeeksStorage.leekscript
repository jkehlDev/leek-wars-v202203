global LEEK_TYPE_ALLY = 1;
global LEEK_TYPE_ENEMY = 2;
global LEEK_TYPE_ALLY_SUMMON = 3;
global LEEK_TYPE_ENEMY_SUMMON = 4;
global StoredLeeks = [
	LEEK_TYPE_ALLY: {
		role_count:[],
		leeks: []
	},
	LEEK_TYPE_ALLY_SUMMON: {
		role_count:[],
		leeks: []
	},
	LEEK_TYPE_ENEMY: {
		role_count:[],
		leeks: []
	},
	LEEK_TYPE_ENEMY_SUMMON: {
		role_count:[],
		leeks: []
	},
];

function updateStorageLeeks() {
	var leek_id, leek_type;
	for (leek_id in getAllies()) {
		leek_type = getLeekTypeById(leek_id);
		upsertLeekById(leek_id, leek_type);
	}
	for (leek_id in getEnemies()) {
		leek_type = getLeekTypeById(leek_id);
		upsertLeekById(leek_id, leek_type);
	}
	if (is_fight_type[FIGHT_TYPE_TEAM]) {
		leek_id = getAlliedTurret()
		upsertLeekById(leek_id, LEEK_TYPE_ALLY);
		turret_ally = getLeekById(leek_id);
		leek_id = getEnemyTurret()
		upsertLeekById(leek_id, LEEK_TYPE_ENEMY);
		turret_enemy = getLeekById(leek_id);
	}
	refreshLeeksRole();	
}

function myLeek() {
	return getLeekById(myLeek_id);
};

function getLeekTypeById(leek_id) {
	return isAlly(leek_id) ?
		(isSummon(leek_id) ? LEEK_TYPE_ALLY_SUMMON : LEEK_TYPE_ALLY) :
		(isSummon(leek_id) ? LEEK_TYPE_ENEMY_SUMMON : LEEK_TYPE_ENEMY);
}

/**
 * LEEK_TYPE_ALLY
 * LEEK_TYPE_ENEMY
 * LEEK_TYPE_ALLY_SUMMON
 * LEEK_TYPE_ENEMY_SUMMON
 * */
function getAliveLeeksByType(leek_type) {
	return arrayFilter(StoredLeeks[leek_type].leeks, function(leek) {
		return leek.leek_isAlive;
	});
}

function getAllAliveLeeks() {
	var leeks = getAliveLeeksByType(LEEK_TYPE_ALLY);
	pushAll(leeks, getAliveLeeksByType(LEEK_TYPE_ENEMY));
	pushAll(leeks, getAliveLeeksByType(LEEK_TYPE_ALLY_SUMMON));
	pushAll(leeks, getAliveLeeksByType(LEEK_TYPE_ENEMY_SUMMON));
	return leeks;
}

/**
 * LEEK_TYPE_ALLY
 * LEEK_TYPE_ENEMY
 * LEEK_TYPE_ALLY_SUMMON
 * LEEK_TYPE_ENEMY_SUMMON
 * */
function getDeadLeeksByType(leek_type) {
	return arrayFilter(StoredLeeks[leek_type].leeks, function(leek) {
		return !leek.leek_isAlive;
	});
}

function getLeekById(leek_id) {
	var leek_type = getLeekTypeById(leek_id);
	return selectLeek(leek_id, leek_type);
}

function refreshLeekById(leek_id) {
	var leek_type = getLeekTypeById(leek_id);
	return upsertLeekById(leek_id, leek_type);
}

function upsertLeekById(leek_id, leek_type) {
	StoredLeeks[leek_type].leeks[leek_id] = new Leek(leek_id);
	return StoredLeeks[leek_type].leeks[leek_id];
}

function removeLeekById(leek_id, leek_type) {
	StoredLeeks[leek_type].leeks[leek_id] = null;
}

function selectLeek(leek_id, leek_type) {
	return StoredLeeks[leek_type].leeks[leek_id] !== null ? StoredLeeks[leek_type].leeks[leek_id] : upsertLeekById(leek_id, leek_type);
}