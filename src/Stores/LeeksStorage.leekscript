global GBL_leekStatePerTurnCol = new Collection('leekStatePerTurn');

global LEEK_TYPE_ALLY = 1 << 1;
global LEEK_TYPE_ALLY_CASTER = (1 << 1) | (1 << 5);
global LEEK_TYPE_ENEMY = 1 << 2;
global LEEK_TYPE_ALLY_SUMMON = 1 << 3;
global LEEK_TYPE_ENEMY_SUMMON = 1 << 4;


global GBL_StoredLeeks = [
	LEEK_TYPE_ALLY: {
		role_count: [],
		leeks: []
	},
	LEEK_TYPE_ALLY_SUMMON: {
		role_count: [],
		leeks: []
	},
	LEEK_TYPE_ENEMY: {
		role_count: [],
		leeks: []
	},
	LEEK_TYPE_ENEMY_SUMMON: {
		role_count: [],
		leeks: []
	},
	LEEK_TYPE_ALLY_CASTER: {
		role_count: [],
		leeks: []
	},
];

function _updateStorageLeeks() {
	var leek_id, leek_type;
	for (leek_id in getAllies()) {
		leek_type = getLeekTypeById(leek_id);
		_upsertLeekById(leek_id, leek_type);
	}
	for (leek_id in getEnemies()) {
		leek_type = getLeekTypeById(leek_id);
		_upsertLeekById(leek_id, leek_type);
	}
	if (GBL_is_fight_type[FIGHT_TYPE_TEAM]) {
		leek_id = getAlliedTurret()
		_upsertLeekById(leek_id, LEEK_TYPE_ALLY);
		GBL_turret_ally = getLeekById(leek_id);
		leek_id = getEnemyTurret()
		_upsertLeekById(leek_id, LEEK_TYPE_ENEMY);
		GBL_turret_enemy = getLeekById(leek_id);
	}
	refreshLeeksRole();
}

function myLeek() {
	return getLeekById(GBL_myLeek_id);
};

/**
 * Return combine Binary type : 
 * LEEK_TYPE_ALLY
 * LEEK_TYPE_ENEMY
 * LEEK_TYPE_ALLY_SUMMON
 * LEEK_TYPE_ENEMY_SUMMON 
 * */
function getLeekTypeById(leek_id) {
	return getEntity() === leek_id ? LEEK_TYPE_ALLY_CASTER :
		(isAlly(leek_id) ?
			(isSummon(leek_id) ? LEEK_TYPE_ALLY_SUMMON : LEEK_TYPE_ALLY) :
			(isSummon(leek_id) ? LEEK_TYPE_ENEMY_SUMMON : LEEK_TYPE_ENEMY));
}

/**
 * LEEK_TYPE_ALLY
 * LEEK_TYPE_ENEMY
 * LEEK_TYPE_ALLY_SUMMON
 * LEEK_TYPE_ENEMY_SUMMON
 * */
function getAliveLeeksByType(leek_type) {
	return arrayFilter(GBL_StoredLeeks[leek_type].leeks, function(leek) {
		return leek.leek_isAlive;
	});
}

function getAllAliveLeeks() {
	var leeks = getAliveLeeksByType(LEEK_TYPE_ALLY);
	pushAll(leeks, getAliveLeeksByType(LEEK_TYPE_ENEMY));
	pushAll(leeks, getAliveLeeksByType(LEEK_TYPE_ALLY_SUMMON));
	pushAll(leeks, getAliveLeeksByType(LEEK_TYPE_ENEMY_SUMMON));
	push(leeks, myLeek());
	return leeks;
}

function getAllAlliesAliveLeeks() {
	var leeks = getAliveLeeksByType(LEEK_TYPE_ALLY);
	pushAll(leeks, getAliveLeeksByType(LEEK_TYPE_ALLY_SUMMON));
	push(leeks, myLeek());
	return leeks;
}

function getAllEnemiesAliveLeeks() {
	var leeks = getAliveLeeksByType(LEEK_TYPE_ENEMY);
	pushAll(leeks, getAliveLeeksByType(LEEK_TYPE_ENEMY_SUMMON));
	return leeks;
}

/**
 * LEEK_TYPE_ALLY
 * LEEK_TYPE_ENEMY
 * LEEK_TYPE_ALLY_SUMMON
 * LEEK_TYPE_ENEMY_SUMMON
 * */
function getDeadLeeksByType(leek_type) {
	return arrayFilter(GBL_StoredLeeks[leek_type].leeks, function(leek) {
		return !leek.leek_isAlive;
	});
}

function getLeekById(leek_id) {
	var leek_type = getLeekTypeById(leek_id);
	return _selectLeek(leek_id, leek_type);
}

function refreshLeekById(leek_id) {
	var leek_type = getLeekTypeById(leek_id);
	return _upsertLeekById(leek_id, leek_type);
}

function _upsertLeekById(leek_id, leek_type) {
	if (GBL_StoredLeeks[leek_type].leeks[leek_id] !== null) {
		GBL_StoredLeeks[leek_type].leeks[leek_id].update();
	} else {
		GBL_StoredLeeks[leek_type].leeks[leek_id] = new Leek(leek_id);
	}
	return GBL_StoredLeeks[leek_type].leeks[leek_id];
}

function _removeLeekById(leek_id, leek_type) {
	GBL_StoredLeeks[leek_type].leeks[leek_id] = null;
}

function _selectLeek(leek_id, leek_type) {
	return GBL_StoredLeeks[leek_type].leeks[leek_id] === null ? _upsertLeekById(leek_id, leek_type) : GBL_StoredLeeks[leek_type].leeks[leek_id];
}