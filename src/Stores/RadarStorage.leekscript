/**
 * Radar zone by leek  
 * {
 * 	leek_id: radarleek.leek_id,
 * 	radar_zones: radar_zones,
 * 	leek_path_map: radar_leek_path_map,
 * 	all_leeks_in_zones: all_leeks_in_zones
 * }
 * */
global GBL_radar_zones_by_leek;

/*
 * 	By cell_id;
 *  cell_id;
 *	enemies_data;
 *	allies_data;
 * => 
 *  zone_sum_life;
 *	zone_count_leeks;
 *	zone_average_lifeRate;
 *	zone_sum_tp;
 *	zone_average_power;
 *	zone_average_strength;
 *	zone_average_wisdom;
 *	zone_average_magic;
 *	zone_average_resistance;
 *
 *	// Balance index : allies <<< - 0 + >>> enemies
 *	balance_life;
 *	balance_strenght;
 *	balance_magic;
 *	balance_wisdom;
 */
global GBL_radar_tactic_map_by_cells;
// -- ----------------
function _refreshRadarZones() {
	GBL_radar_zones_by_leek = [];
	for (var leek in getAllAliveLeeks()) {
		GBL_radar_zones_by_leek[leek.leek_id] = resolveZonesRadar(GBL_RADAR_DEPTH, leek);
	}
}

/**
 * { leek_id, radar_zones, leek_path_map, all_leeks_in_zones }
 * radar_zones[] : { map, coordinates_min, coordinates_max, leeks: [ LEEK_TYPE_ALLY: [], LEEK_TYPE_ALLY_SUMMON: [], LEEK_TYPE_ENEMY: [], LEEK_TYPE_ENEMY_SUMMON: []] }
 * all_leeks_in_zones[] : [ LEEK_TYPE_ALLY: [], LEEK_TYPE_ALLY_SUMMON: [], LEEK_TYPE_ENEMY: [], LEEK_TYPE_ENEMY_SUMMON: []]
 * */
function GBL_myLeekRadarZones() {
	return GBL_radar_zones_by_leek[myLeek().leek_id];
}

function _refreshRadarTactic() {
	GBL_radar_tactic_map_by_cells = [];
	var leek, radar_zone, cellsInMap, cell, zone, ratio;
	for (cell in GBL_full_path_map_cells) {
		GBL_radar_tactic_map_by_cells[cell.cell_id] = new TacticMapCell(cell.cell_id);
	}
	var offsetLifeMaxBlue = 0;
	var offsetLifeMaxRed = 0;
	for (leek in getAllAliveLeeks()) {
		radar_zone = GBL_radar_zones_by_leek[leek.leek_id];
		
		if (radar_zone !== null && leek.leek_id !== GBL_myLeek_id) {
			ratio = 1 / radar_zone.leek_path_map.pathRange;
			for (zone = 0; zone <= radar_zone.leek_path_map.pathRange; zone++) {
				cellsInMap = convertBinaryMapToCellIdMap(
					radar_zone.leek_path_map.map[zone],
					radar_zone.leek_path_map.coordinates_min,
					radar_zone.leek_path_map.coordinates_max
				);
				for (cell in cellsInMap) {
					GBL_radar_tactic_map_by_cells[cell.cell_id].addLeek(leek, 1 - (ratio * zone));
					offsetLifeMaxBlue = max(offsetLifeMaxBlue, GBL_radar_tactic_map_by_cells[cell.cell_id].allies_data.zone_sum_life);
					offsetLifeMaxRed = max(offsetLifeMaxRed, GBL_radar_tactic_map_by_cells[cell.cell_id].enemies_data.zone_sum_life);
				}
			}

		}
	}
	var blue, red, rate;
	for (cell in GBL_full_path_map_cells) {
		GBL_radar_tactic_map_by_cells[cell.cell_id].allies_data.zone_sum_life_rate =
			GBL_radar_tactic_map_by_cells[cell.cell_id].allies_data.zone_sum_life / offsetLifeMaxBlue;
		GBL_radar_tactic_map_by_cells[cell.cell_id].enemies_data.zone_sum_life_rate =
			GBL_radar_tactic_map_by_cells[cell.cell_id].enemies_data.zone_sum_life / offsetLifeMaxRed;
		GBL_radar_tactic_map_by_cells[cell.cell_id].balance_zone_sum_life_rate =
			decimal(GBL_radar_tactic_map_by_cells[cell.cell_id].enemies_data.zone_sum_life_rate -
				GBL_radar_tactic_map_by_cells[cell.cell_id].allies_data.zone_sum_life_rate, 2);
		if (GBL_MARK_ENABLE) {
			blue = floor((1 - GBL_radar_tactic_map_by_cells[cell.cell_id].allies_data.zone_sum_life_rate) * 255);
			red = floor((1 - GBL_radar_tactic_map_by_cells[cell.cell_id].enemies_data.zone_sum_life_rate) * 255);
			if (blue < 255 || red < 255) {
				rate = decimal((GBL_radar_tactic_map_by_cells[cell.cell_id].balance_zone_sum_life_rate / 2) + 0.5, 2) * 255;
				mark(cell.cell_id, getColor(rate, 255 - rate, 255 - rate));
			}
		}
	}
}