/**
 * launch_contract;
 *	tool_id;
 *	isLineEffect;
 *	tool_isWeapon;
 *	needLos;
 *	all_launchs;
 *	selected_launchs;
 * */
class Launchs {
	launch_contract;
	tool_id;
	isLineEffect;
	tool_isWeapon;
	needLos;
	all_launchs;
	selected_launchs;

	constructor(launch_contract) {
		this.launch_contract = launch_contract;
		this.tool_id = this.launch_contract.caster_tool_id;
		var tool = getToolById(tool_id);
		this.tool_isWeapon = tool.tool_isWeapon;
		this.isLineEffect = tool.tool_effectAreaType === AREA_FIRST_INLINE || tool.tool_effectAreaType === AREA_LASER_LINE;
		this.needLos = getToolById(this.tool_id).tool_needLos;
		this.all_launchs = launch_resolvers._resolve[this.launch_contract.cast_type](
			this.launch_contract,
			this.tool_id,
			this.needLos,
			this.tool_isWeapon,
			this.isLineEffect);
		//console.info(['this.all_launchs', this.all_launchs]);
		this.selected_launchs = launch_filters._filterBeforeLinearize(
			this.all_launchs,
			this.launch_contract.targets_rules);
		//console.info(['this.selected_launchs filtered', this.selected_launchs]);
		this.selected_launchs = linearizeLaunchLst(this.selected_launchs);
		this.selected_launchs = launch_filters._filterAfterLinearize(
			this.selected_launchs,
			this.launch_contract.targets_rules);
		
		this.selected_launchs = launch_sorters._sort(this.selected_launchs, this.launch_contract.priorities);
		//console.info(['this.selected_launchs sorted', this.selected_launchs]);
	}
}