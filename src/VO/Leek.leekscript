class Leek {
	leek_id;
	leek_level;
	leek_name;
	leek_life;
	leek_lifeMax;
	leek_lifeRate;
	leek_tp;
	leek_tpMax;
	leek_mp;
	leek_mpMax;
	leek_isAlive;
	leek_power;
	leek_strength;
	leek_wisdom;
	leek_science;
	leek_magic;
	leek_resistance;
	leek_agility;
	leek_weapons;
	leek_weapon;
	leek_chips;
	leek_cell;
	leek_coordinates;
	leek_isAlly;
	leek_isEnemy;
	leek_isSummon;
	leek_isCaster;
	leek_kind;
	leek_effects;
	leek_chipsCooldown;
	leek_tools;
	leek_role;
	leek_type;

	/**
	 * Leek - All leek informations
	 * @param idOrLeek : number | Leek - Leek id or Leek instance to clone
	 * */
	constructor(idOrLeek) {
		if (typeOf(idOrLeek) === TYPE_NUMBER) {
			this.leek_id = idOrLeek;
			this.leek_level = getLevel(this.leek_id);
			this.leek_name = getName(this.leek_id);
			this.leek_weapons = getWeapons(this.leek_id);
			this.leek_chips = getChips(this.leek_id);
			this.leek_tools = clone(this.leek_weapons, 2);
			pushAll(this.leek_tools, clone(this.leek_chips, 2));
			this.leek_chipsCooldown = [];
			this.leek_life = getLife(this.leek_id);
			this.leek_lifeMax = max(getTotalLife(this.leek_id), 1);
			this.leek_lifeRate = decimal(this.leek_life / this.leek_lifeMax, 2);
			this.leek_tp = getTP(this.leek_id);
			this.leek_tp = this.leek_tp > 0 ? this.leek_tp : 0;
			this.leek_tpMax = getTotalTP(this.leek_id);
			this.leek_mp = getMP(this.leek_id);
			this.leek_mp = this.leek_mp > 0 ? this.leek_mp : 0;
			this.leek_mpMax = getTotalMP(this.leek_id);
			this.leek_isAlive = isAlive(this.leek_id);
			this.leek_power = getPower(this.leek_id);
			this.leek_strength = getStrength(this.leek_id);
			this.leek_wisdom = getWisdom(this.leek_id);
			this.leek_science = getScience(this.leek_id);
			this.leek_magic = getMagic(this.leek_id);
			this.leek_resistance = getResistance(this.leek_id);
			this.leek_agility = getAgility(this.leek_id);
			this.leek_weapon = getWeapon(this.leek_id);
			this.leek_cell = getCell(this.leek_id);
			this.leek_coordinates = convertCellIdToLineNdCell(this.leek_cell);
			this.leek_effects = arrayMap(getEffects(this.leek_id), function(effect) {
				return new LeekEffect(effect);
			});
			this.updateChipsCooldown();
			this.leek_isAlly = isAlly(this.leek_id);
			this.leek_isEnemy = !this.leek_isAlly;
			this.leek_isSummon = isSummon(this.leek_id);
			this.leek_isCaster = this.leek_id === getEntity()
			this.leek_kind = (this.leek_isEnemy ? EFFECT_TARGET_ENEMIES : 0) |
				(this.leek_isAlly ? EFFECT_TARGET_ALLIES : 0) |
				(this.leek_isSummon ? EFFECT_TARGET_SUMMONS : EFFECT_TARGET_NON_SUMMONS) |
				(this.leek_isCaster ? EFFECT_TARGET_CASTER : 0);
			this.leek_role = LEEK_ROLE_UNDEFINED;
			this.updateRole();
			this.leek_type = this._getLeekType();
		} else {
			this.clone(idOrLeek);
		}
	}

	clone(leek) {
		this.leek_id = leek.leek_id;
		this.leek_level = leek.leek_level;
		this.leek_name = leek.leek_name;
		this.leek_life = leek.leek_life;
		this.leek_lifeMax = leek.leek_lifeMax;
		this.leek_lifeRate = leek.leek_lifeRate;
		this.leek_tp = leek.leek_tp;
		this.leek_tpMax = leek.leek_tpMax;
		this.leek_mp = leek.leek_mp;
		this.leek_mpMax = leek.leek_mpMax;
		this.leek_isAlive = leek.leek_isAlive;
		this.leek_strength = leek.leek_strength;
		this.leek_power = leek.leek_power;
		this.leek_wisdom = leek.leek_wisdom;
		this.leek_science = leek.leek_science;
		this.leek_magic = leek.leek_magic;
		this.leek_resistance = leek.leek_resistance;
		this.leek_agility = leek.leek_agility;
		this.leek_weapons = clone(leek.leek_weapons, 2);
		this.leek_weapon = leek.leek_weapon;
		this.leek_chips = clone(leek.leek_chips, 2);
		this.leek_tools = leek.leek_tools;
		this.leek_cell = leek.leek_cell;
		this.leek_coordinates = leek.leek_coordinates;
		this.leek_isAlly = leek.leek_isAlly;
		this.leek_isEnemy = leek.leek_isEnemy;
		this.leek_isSummon = leek.leek_isSummon;
		this.leek_isCaster = leek.leek_isCaster;
		this.leek_effects = clone(leek.leek_effects, 2);
		this.leek_chipsCooldown = clone(leek.leek_chipsCooldown, 2);
		this.leek_kind = clone(leek.leek_kind, 2);
		this.leek_role = clone(leek.leek_role, 2);
	}

	update() {
		this.leek_isAlive = isAlive(this.leek_id);
		this.leek_life = this.leek_isAlive ? getLife(this.leek_id) : 0;
		this.leek_lifeMax = max(getTotalLife(this.leek_id), 1);
		this.leek_lifeRate = decimal(this.leek_life / this.leek_lifeMax, 2);
		this.leek_tp = getTP(this.leek_id);
		this.leek_tp = this.leek_tp > 0 ? this.leek_tp : 0;
		this.leek_tpMax = getTotalTP(this.leek_id);
		this.leek_mp = getMP(this.leek_id);
		this.leek_mp = this.leek_mp > 0 ? this.leek_mp : 0;
		this.leek_mpMax = getTotalMP(this.leek_id);
		this.leek_power = getPower(this.leek_id);
		this.leek_strength = getStrength(this.leek_id);
		this.leek_wisdom = getWisdom(this.leek_id);
		this.leek_science = getScience(this.leek_id);
		this.leek_magic = getMagic(this.leek_id);
		this.leek_resistance = getResistance(this.leek_id);
		this.leek_agility = getAgility(this.leek_id);
		this.leek_weapon = getWeapon(this.leek_id);
		this.leek_cell = getCell(this.leek_id);
		this.leek_coordinates = convertCellIdToLineNdCell(this.leek_cell);
		this.leek_effects = arrayMap(getEffects(this.leek_id), function(effect) {
			return new LeekEffect(effect);
		});
		this.updateChipsCooldown();
		updateLeekState(this.leek_id);
	}

	updateRole() {
		if (this.leek_isSummon) {
			if (this.leek_name === 'tactician_bulb') {
				//CHIP_TACTICIAN_BULB
				this.leek_role = LEEK_ROLE_DD_STRENGTH; // A amÃ©liorer
			} else
			if (this.leek_name === 'lighting_bulb') {
				// CHIP_LIGHTNING_BULB
				this.leek_role = LEEK_ROLE_DD_STRENGTH;
			} else
			if (this.leek_name === 'wizard_bulb') {
				// CHIP_WIZARD_BULB
				this.leek_role = LEEK_ROLE_DD_STRENGTH;
			} else
			if (this.leek_name === 'fire_bulb') {
				// CHIP_FIRE_BULB
				this.leek_role = LEEK_ROLE_DD_STRENGTH;
			} else
			if (this.leek_name === 'healer_bulb') {
				// CHIP_HEALER_BULB
				this.leek_role = LEEK_ROLE_HEALER;
			} else
			if (this.leek_name === 'iced_bulb') {
				// CHIP_ICED_BULB
				this.leek_role = LEEK_ROLE_DD_STRENGTH;
			} else
			if (this.leek_name === 'rocky_bulb') {
				// CHIP_ROCKY_BULB
				this.leek_role = LEEK_ROLE_TANK;
			} else
			if (this.leek_name === 'puny_bulb') {
				// CHIP_PUNY_BULB
				this.leek_role = LEEK_ROLE_HEALER;
			}
		} else {
			if (_countSummonsChips(this) >= 2) {
				this.leek_role = LEEK_ROLE_SUMMONERS;
			} else {
				this.leek_role = shift(arraySort([{
						role: LEEK_ROLE_TANK,
						value: this.leek_resistance
					},
					{
						role: LEEK_ROLE_HEALER,
						value: this.leek_wisdom
					},
					{
						role: LEEK_ROLE_DD_SCIENCE,
						value: this.leek_science
					},
					{
						role: LEEK_ROLE_DD_MAGIC,
						value: this.leek_magic
					},
					{
						role: LEEK_ROLE_DD_STRENGTH,
						value: this.leek_strength
					}
				], function(_state1, _state2) {
					return _state1.value > _state2.value ? -1 : (_state1.value < _state2.value ? 1 : 0);
				})).role;
			}
		}
	}

	updateChipsCooldown() {
		for (var chipId in this.leek_chips) {
			this.leek_chipsCooldown[chipId] = {
				chip: chipId,
				cooldown: getCooldown(chipId, this.leek_id)
			};
		}
	}

	setWeaponById(weapon_id) {
		var checkLeek_weapons = function(tmpWeapon_id) {
			return arrayInclude(this.leek_weapons, function(tmpLeek_weapon) {
				return tmpLeek_weapon === tmpWeapon_id;
			})
		}
		if (checkLeek_weapons(weapon_id)) {
			if (this.leek_weapon === weapon_id) {
				return true;
			} else
			if (this.leek_tp > 0) {
				setWeapon(weapon_id);
				this.leek_weapon = weapon_id;
				this.leek_tp--;
				return true;
			}
		}
		return false;
	}

	leekHaveToolById(tool_id) {
		return arrayInclude(this.leek_tools, function(tmpTool_id) {
			return tool_id === tmpTool_id;
		});
	}

	_getLeekType() {
		return this.leek_isCaster ? LEEK_TYPE_ALLY_CASTER :
			(this.leek_isAlly ?
				(this.leek_isSummon ? LEEK_TYPE_ALLY_SUMMON : LEEK_TYPE_ALLY) :
				(this.leek_isSummon ? LEEK_TYPE_ENEMY_SUMMON : LEEK_TYPE_ENEMY));
	}
}