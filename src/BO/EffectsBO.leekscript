// ____________________________________________________
// ---------------------- UTILS -----------------------
function isEffectToolExistOn(_target_leek, _tool_id) {
	return arrayInclude(_target_leek.leek_effects, function(_targetEffect) {
		return _targetEffect.tool_id === _tool_id;
	});
};

function getEffectSumValueOfLeek(target_leek, effect_tested) {
	return arrayFoldLeft(arrayFilter(target_leek.leek_effects, function(effect) {
		return effect.type === effect_tested;
	}), function(total, effect) {
		return total + effect.value;
	}, 0);
};

function leekHasOneOfEffects(_effects, _leek, _minLeftTurn) {
	return arrayInclude(_leek.leek_effects, function(_leek_effect) {
		return arrayInclude(_effects, function(_effect) {
			return (_effect === _leek_effect.type) && (_leek_effect.turns > _minLeftTurn);
		});
	})
};

function isEffectEnableOn(_leek, _tool_effect) {
	if (_leek.leek_isCaster && _tool_effect.effectTargetCaster && !_tool_effect.isOnCaster) {
		return true;
	}
	if (_leek.leek_isAlly && _tool_effect.effectTargetAlly) {
		if (_leek.leek_isSummon && _tool_effect.effectTargetSummons) {
			return true;
		}
		if (!_leek.leek_isSummon && _tool_effect.effectTargetNonSummons) {
			return true;
		}
		return false;
	}
	if (_leek.leek_isEnemy && _tool_effect.effectTargetEnemy) {
		if (_leek.leek_isSummon && _tool_effect.effectTargetSummons) {
			return true;
		}
		if (!_leek.leek_isSummon && _tool_effect.effectTargetNonSummons) {
			return true;
		}
		return false;
	}
	return (
		!_tool_effect.effectTargetCaster &&
		!_tool_effect.effectTargetAlly &&
		!_tool_effect.effectTargetEnemy &&
		!_tool_effect.effectTargetSummons &&
		!_tool_effect.effectTargetNonSummons
	) || false;
};

function isEffectEnableOnLeekType(_leek_type, _tool_effect) {
	if ((_leek_type & LEEK_TYPE_ALLY_CASTER) !== 0 && _tool_effect.effectTargetCaster && !_tool_effect.isOnCaster) {
		return true;
	}
	if (_tool_effect.effectTargetAlly) {
		if ((_leek_type & LEEK_TYPE_ALLY_SUMMON) !== 0 && _tool_effect.effectTargetSummons) {
			return true;
		}
		if ((_leek_type & LEEK_TYPE_ALLY) !== 0 && _tool_effect.effectTargetNonSummons) {
			return true;
		}
	}
	if (_tool_effect.effectTargetEnemy) {
		if ((_leek_type & LEEK_TYPE_ENEMY_SUMMON) !== 0 && _tool_effect.effectTargetSummons) {
			return true;
		}
		if ((_leek_type & LEEK_TYPE_ENEMY) !== 0 && _tool_effect.effectTargetNonSummons) {
			return true;
		};
	}
	return (
		!_tool_effect.effectTargetCaster &&
		!_tool_effect.effectTargetAlly &&
		!_tool_effect.effectTargetEnemy &&
		!_tool_effect.effectTargetSummons &&
		!_tool_effect.effectTargetNonSummons
	) || false;
};


function _effectAreaFactor(_target_cell, _affected_leek_cell, _effect_value) {
	return floor((1 - getCellDistance(_target_cell, _affected_leek_cell) * 0.20) * _effect_value);
};
// ____________________________________________________
// ------------- EVALUATE EFECTS RESOLVERS ------------
global shackle_minEffect = [
	EFFECT_SHACKLE_AGILITY: function(shackle_value_tmp, target_tmp) {
		return min(shackle_value_tmp, target_tmp.leek_agility)
	},
	EFFECT_SHACKLE_MAGIC: function(shackle_value_tmp, target_tmp) {
		return min(shackle_value_tmp, target_tmp.leek_magic)
	},
	EFFECT_SHACKLE_MP: function(shackle_value_tmp, target_tmp) {
		return min(shackle_value_tmp, target_tmp.leek_mpMax)
	},
	EFFECT_SHACKLE_STRENGTH: function(shackle_value_tmp, target_tmp) {
		return min(shackle_value_tmp, target_tmp.leek_strength)
	},
	EFFECT_SHACKLE_TP: function(shackle_value_tmp, target_tmp) {
		return min(shackle_value_tmp, target_tmp.leek_tpMax)
	},
	EFFECT_SHACKLE_WISDOM: function(shackle_value_tmp, target_tmp) {
		return min(shackle_value_tmp, target_tmp.leek_wisdom)
	}
];

function _effect_shackle_typeOf(shackle_type) {
	return function(caster, target, effect, toolId, targets_count, caster_cell, target_cell, affected_leek_cell) {
		var shackle_value = (effect.isMultipliedByTargets ? effect.value * targets_count : effect.value) * (1 + caster.leek_magic / 100);
		shackle_value = shackle_minEffect[shackle_type](shackle_value, target);
		return _effectAreaFactor(target_cell, affected_leek_cell, shackle_value);
	};
};

function _effect_buff_raw_valuOf(caster, target, effect, toolId, targets_count, caster_cell, target_cell, affected_leek_cell) {
	var value = (effect.isMultipliedByTargets ? effect.value * targets_count : effect.value);
	return _effectAreaFactor(target_cell, affected_leek_cell, value);
};

function _effect_buff_valuOf(caster, target, effect, toolId, targets_count, caster_cell, target_cell, affected_leek_cell) {
	var value = (effect.isMultipliedByTargets ? effect.value * targets_count : effect.value) * (1 + caster.leek_science / 100);
	return _effectAreaFactor(target_cell, affected_leek_cell, value);
};

/**
 * Evaluate value of effect on target leek by a caster [EFFECT_ID] : 
 * (
 * caster : Leek, 
 * target : Leek, 
 * effect  : LeekEffect | ToolEffect, 
 * targets_count : number
 * ) => resolved_value as number
 * */
global EvalEffectValue = [
	EFFECT_DAMAGE: function(caster, target, effect, toolId, targets_count, caster_cell, target_cell, affected_leek_cell) {
		var value = (effect.isMultipliedByTargets ? effect.value * targets_count : effect.value) *
			(1 + caster.leek_strength / 100);
		var target_absolute_shield = getEffectSumValueOfLeek(target, EFFECT_ABSOLUTE_SHIELD) * (1 + target.leek_resistance / 100);
		var target_absolute_vulnerability = getEffectSumValueOfLeek(target, EFFECT_ABSOLUTE_VULNERABILITY);
		var target_relative_shield = getEffectSumValueOfLeek(target, EFFECT_RELATIVE_SHIELD) * (1 + target.leek_resistance / 100);
		var target_vulnerability = getEffectSumValueOfLeek(target, EFFECT_VULNERABILITY);
		var dmg_value = max(0, value * (1 - ((target_relative_shield / 100) - (target_vulnerability / 100))) - (target_absolute_shield - target_absolute_vulnerability));
		return min(_effectAreaFactor(target_cell, affected_leek_cell, dmg_value), target.leek_life);
	},
	EFFECT_POISON: function(caster, target, effect, toolId, targets_count, caster_cell, target_cell, affected_leek_cell) {
		var dmg_value = (effect.isMultipliedByTargets ? effect.value * targets_count : effect.value) * (1 + (caster.leek_magic / 100));
		return min(_effectAreaFactor(target_cell, affected_leek_cell, dmg_value), target.leek_life);
	},
	EFFECT_LIFE_DAMAGE: function(caster, target, effect, toolId, targets_count, caster_cell, target_cell, affected_leek_cell) {
		var value = caster.leek_life * ((effect.isMultipliedByTargets ? effect.value * targets_count : effect.value) / 100);
		var target_absolute_shield = getEffectSumValueOfLeek(target, EFFECT_ABSOLUTE_SHIELD) * (1 + target.leek_resistance / 100);
		var target_absolute_vulnerability = getEffectSumValueOfLeek(target, EFFECT_ABSOLUTE_VULNERABILITY);
		var target_relative_shield = getEffectSumValueOfLeek(target, EFFECT_RELATIVE_SHIELD) * (1 + target.leek_resistance / 100);
		var target_vulnerability = getEffectSumValueOfLeek(target, EFFECT_VULNERABILITY);
		var target_damage_return = getEffectSumValueOfLeek(target, EFFECT_DAMAGE_RETURN) * (1 + target.leek_agility / 100);
		var dmg_value = max(0, value * (1 - (target_relative_shield - target_vulnerability)) - (target_absolute_shield - target_absolute_vulnerability));
		return min(_effectAreaFactor(target_cell, affected_leek_cell, dmg_value), target.leek_life);
	},
	EFFECT_NOVA_DAMAGE: function(caster, target, effect, toolId, targets_count, caster_cell, target_cell, affected_leek_cell) {
		var value = (effect.isMultipliedByTargets ? effect.value * targets_count : effect.value) * (1 + caster.leek_science / 100);
		var target_absolute_shield = getEffectSumValueOfLeek(target, EFFECT_ABSOLUTE_SHIELD) * (1 + target.leek_resistance / 100);
		var target_absolute_vulnerability = getEffectSumValueOfLeek(target, EFFECT_ABSOLUTE_VULNERABILITY);
		var target_relative_shield = getEffectSumValueOfLeek(target, EFFECT_RELATIVE_SHIELD) * (1 + target.leek_resistance / 100);
		var target_vulnerability = getEffectSumValueOfLeek(target, EFFECT_VULNERABILITY);
		var dmg_value = max(0, value * (1 - ((target_relative_shield / 100) - (target_vulnerability / 100))) - (target_absolute_shield - target_absolute_vulnerability));
		return min(_effectAreaFactor(target_cell, affected_leek_cell, dmg_value), target.leek_lifeMax);
	},
	EFFECT_NOVA_VITALITY: function(caster, target, effect, toolId, targets_count, caster_cell, target_cell, affected_leek_cell) {
		var value = (effect.isMultipliedByTargets ? effect.value * targets_count : effect.value) * (1 + caster.leek_science / 100);
		return _effectAreaFactor(target_cell, affected_leek_cell, value);
	},
	EFFECT_HEAL: function(caster, target, effect, toolId, targets_count, caster_cell, target_cell, affected_leek_cell) {
		var value = (effect.isMultipliedByTargets ? effect.value * targets_count : effect.value) * (1 + caster.leek_wisdom / 100);
		var minValue = effect.isOnCaster ? caster.leek_lifeMax - caster.leek_life : target.leek_lifeMax - target.leek_life;
		return min(minValue, _effectAreaFactor(target_cell, affected_leek_cell, value));
	},
	EFFECT_BOOST_MAX_LIFE: function(caster, target, effect, toolId, targets_count, caster_cell, target_cell, affected_leek_cell) {
		var value = (effect.isMultipliedByTargets ? effect.value * targets_count : effect.value) * (1 + caster.leek_wisdom / 100);
		return _effectAreaFactor(target_cell, affected_leek_cell, value);
	},
	EFFECT_AFTEREFFECT: _effect_buff_valuOf,
	EFFECT_BUFF_AGILITY: _effect_buff_valuOf,
	EFFECT_BUFF_STRENGTH: _effect_buff_valuOf,
	EFFECT_BUFF_MP: _effect_buff_valuOf,
	EFFECT_BUFF_RESISTANCE: _effect_buff_valuOf,
	EFFECT_BUFF_TP: _effect_buff_valuOf,
	EFFECT_BUFF_WISDOM: _effect_buff_valuOf,
	EFFECT_DAMAGE_RETURN: function(caster, target, effect, toolId, targets_count, caster_cell, target_cell, affected_leek_cell) {
		var value = (effect.isMultipliedByTargets ? effect.value * targets_count : effect.value) * (1 + caster.leek_agility / 100);
		return _effectAreaFactor(target_cell, affected_leek_cell, value);
	},
	EFFECT_SHACKLE_AGILITY: _effect_shackle_typeOf(EFFECT_SHACKLE_AGILITY),
	EFFECT_SHACKLE_MAGIC: _effect_shackle_typeOf(EFFECT_SHACKLE_MAGIC),
	EFFECT_SHACKLE_MP: _effect_shackle_typeOf(EFFECT_SHACKLE_MP),
	EFFECT_SHACKLE_STRENGTH: _effect_shackle_typeOf(EFFECT_SHACKLE_STRENGTH),
	EFFECT_SHACKLE_TP: _effect_shackle_typeOf(EFFECT_SHACKLE_TP),
	EFFECT_SHACKLE_WISDOM: _effect_shackle_typeOf(EFFECT_SHACKLE_WISDOM),
	EFFECT_RAW_BUFF_AGILITY: _effect_buff_raw_valuOf,
	EFFECT_RAW_BUFF_STRENGTH: _effect_buff_raw_valuOf,
	EFFECT_RAW_BUFF_MP: _effect_buff_raw_valuOf,
	EFFECT_RAW_BUFF_RESISTANCE: _effect_buff_raw_valuOf,
	EFFECT_RAW_BUFF_TP: _effect_buff_raw_valuOf,
	EFFECT_RAW_BUFF_WISDOM: _effect_buff_raw_valuOf,
	EFFECT_RAW_BUFF_MAGIC: _effect_buff_raw_valuOf,
	EFFECT_RAW_BUFF_SCIENCE: _effect_buff_raw_valuOf,
	EFFECT_RAW_BUFF_POWER: _effect_buff_raw_valuOf,
	EFFECT_ABSOLUTE_SHIELD: function(caster, target, effect, toolId, targets_count, caster_cell, target_cell, affected_leek_cell) {
		var value = (effect.isMultipliedByTargets ? effect.value * targets_count : effect.value) * (1 + caster.leek_resistance / 100);
		return _effectAreaFactor(target_cell, affected_leek_cell, value);
	},
	EFFECT_RELATIVE_SHIELD: function(caster, target, effect, toolId, targets_count, caster_cell, target_cell, affected_leek_cell) {
		var value = (effect.isMultipliedByTargets ? effect.value * targets_count : effect.value) * (1 + caster.leek_resistance / 100);
		return _effectAreaFactor(target_cell, affected_leek_cell, value);
	},
	EFFECT_ABSOLUTE_VULNERABILITY: _effect_buff_raw_valuOf,
	EFFECT_DAMAGE_TO_ABSOLUTE_SHIELD: _effect_buff_raw_valuOf,
	EFFECT_DAMAGE_TO_STRENGTH: _effect_buff_raw_valuOf,
	EFFECT_DAMAGE_TO_STRENGTH: _effect_buff_raw_valuOf,
	EFFECT_NOVA_DAMAGE_TO_MAGIC: _effect_buff_raw_valuOf,
	EFFECT_POISON_TO_SCIENCE: _effect_buff_raw_valuOf,
	EFFECT_PROPAGATION: _effect_buff_raw_valuOf,
	EFFECT_VULNERABILITY: _effect_buff_raw_valuOf,
	EFFECT_SUMMON: _effect_buff_raw_valuOf,
	EFFECT_STEAL_ABSOLUTE_SHIELD: _effect_buff_raw_valuOf,
	EFFECT_RESURRECT: _effect_buff_raw_valuOf,
	EFFECT_REMOVE_SHACKLES: _effect_buff_raw_valuOf,
	EFFECT_RAW_ABSOLUTE_SHIELD: _effect_buff_raw_valuOf,
	EFFECT_MOVED_TO_MP: _effect_buff_raw_valuOf,
	EFFECT_ALLY_KILLED_TO_AGILITY: _effect_buff_raw_valuOf,
	EFFECT_KILL: function(caster, target, effect, toolId, targets_count, caster_cell, target_cell, affected_leek_cell) {
		return target.leek_life;
	},
	EFFECT_DEBUFF: function(caster, target, effect, toolId, targets_count, caster_cell, target_cell, affected_leek_cell) {
		return arrayFoldLeft(target.leek_effects, function(sumValue, _effect) {
			return sumValue + floor(_effect.value / 2);
		}, 0);
	},
	EFFECT_PUSH: function(caster, target, effect, toolId, targets_count, caster_cell, target_cell, affected_leek_cell) {
		var _affected_cells = getToolById(toolId).getToolEffectiveArea(caster_cell, target_cell);
		var _destination_cell = shift(arraySort(_affected_cells, function(_cell_id1, _cell_id2) {
			var _dist1 = getCellDistance(_cell_id1, target_cell);
			var _dist2 = getCellDistance(_cell_id2, target_cell);
			return _compareValues(_dist1, _dist2);
		}));
		return getCellDistance(affected_leek_cell, _destination_cell);
	},
	EFFECT_TELEPORT: function(caster, target, effect, toolId, targets_count, caster_cell, target_cell, affected_leek_cell) {
		return getCellDistance(caster_cell, target_cell);
	},
	EFFECT_ATTRACT: function(caster, target, effect, toolId, targets_count, caster_cell, target_cell, affected_leek_cell) {
		return getCellDistance(caster_cell, affected_leek_cell);
	},
	EFFECT_INVERT: function(caster, target, effect, toolId, targets_count, caster_cell, target_cell, affected_leek_cell) {
		return getCellDistance(caster_cell, target_cell);
	},
	EFFECT_ANTIDOTE: function(caster, target, effect, toolId, targets_count, caster_cell, target_cell, affected_leek_cell) {
		return getEffectSumValueOfLeek(target, EFFECT_POISON);
	},
	EFFECT_DEBUFF: function(caster, target, effect, toolId, targets_count, caster_cell, target_cell, affected_leek_cell) {
		return getEffectSumValueOfLeek(target, EFFECT_POISON) +
			getEffectSumValueOfLeek(target, EFFECT_ABSOLUTE_SHIELD) +
			getEffectSumValueOfLeek(target, EFFECT_RELATIVE_SHIELD) +
			getEffectSumValueOfLeek(target, EFFECT_HEAL) +
			getEffectSumValueOfLeek(target, EFFECT_RAW_BUFF_SCIENCE) +
			getEffectSumValueOfLeek(target, EFFECT_RAW_BUFF_MAGIC);
	},
];