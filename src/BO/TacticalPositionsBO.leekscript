function _sortPositionsNearestTarget(targeted_leek, myCurrent_leek) {
	return function(cell1, cell2) {
		var dist_1 = getPathLength(targeted_leek.leek_cell, cell1.cell_id);
		dist_1 = dist_1 === null ? getCellDistance(targeted_leek.leek_cell, cell1.cell_id) : dist_1;
		var dist_2 = getPathLength(targeted_leek.leek_cell, cell2.cell_id);
		dist_2 = dist_2 === null ? getCellDistance(targeted_leek.leek_cell, cell2.cell_id) : dist_2;
		var _compareRateSumLife = GBL_radar_tactic_map_by_cells[cell1.cell_id].compareRateSumLife(GBL_radar_tactic_map_by_cells[cell2.cell_id]);
		return ((dist_1 > dist_2) ? 1 : ((dist_1 < dist_2) ? -1 : _compareRateSumLife));
	};
}

function _sortPositionsSafest(targeted_leek, myCurrent_leek) {
	return function(cell1, cell2) {
		var dist_1 = getCellDistance(targeted_leek.leek_cell, cell1.cell_id);
		var dist_2 = getCellDistance(targeted_leek.leek_cell, cell2.cell_id);
		var _compareRateSumLife = GBL_radar_tactic_map_by_cells[cell1.cell_id].compareRateSumLife(GBL_radar_tactic_map_by_cells[cell2.cell_id]);
		return (_compareRateSumLife !== 0 ? _compareRateSumLife : (dist_1 < dist_2 ? 1 :
			(dist_1 > dist_2 ? -1 : 0)));
	};
}

function _sortPositionsRudest(targeted_leek, myCurrent_leek) {
	return function(cell1, cell2) {
		var dist_1 = getCellDistance(targeted_leek.leek_cell, cell1.cell_id);
		var dist_2 = getCellDistance(targeted_leek.leek_cell, cell2.cell_id);
		var _compareRateSumLife = GBL_radar_tactic_map_by_cells[cell1.cell_id].compareRateSumLife(GBL_radar_tactic_map_by_cells[cell2.cell_id]);
		return (_compareRateSumLife !== 0 ? -_compareRateSumLife : (dist_1 < dist_2 ? -1 :
			(dist_1 > dist_2 ? 1 : 0)));
	};
}

function _sortNoSort(leek1, leek2) {
	return 0;
}

function _sortLeekByLifeRateASC(leek1, leek2) {
	return ((leek1.leek_lifeRate < leek2.leek_lifeRate) ? -1 :
		((leek1.leek_lifeRate > leek2.leek_lifeRate) ? 1 : _sortLeekByLevelDSC(leek1, leek2)));
}

function _sortLeekByLevelDSC(leek1, leek2) {
	return ((leek1.leek_level > leek2.leek_level) ? -1 :
		((leek1.leek_level < leek2.leek_level) ? 1 : 0));
}

function _sortLeekByLevelASC(leek1, leek2) {
	return ((leek1.leek_level < leek2.leek_level) ? -1 :
		((leek1.leek_level > leek2.leek_level) ? 1 : 0));
}
/**
 * cell_id
 *isPriority
 *targetCell
 *moveTo
 * */
function resolveTacticalPositionByTargetsLeeksNdTacticalArea(target_leeks, targetSorter, tactical_area, positionsSorter) {
	var target_position_cell_id = null;
	var isPriority = false;
	var targetCell_dist;
	if (count(target_leeks) > 0) {
		var positions_binary_aroundTarget, positions_bynary_map, intersect_positions, positions_map_cells, target_position_cell_ids, pathToTargetBinary;
		var target_leeks_sorted = arraySort(target_leeks, targetSorter);
		for (var target_leek in target_leeks_sorted) {
			isPriority = false;
			if (target_leek.leek_id !== GBL_myLeek_id) {
				positions_binary_aroundTarget = resolveAreaTemplateOnCell(tactical_area, target_leek.leek_cell, true);
				intersect_positions = intersection(
					GBL_myLeek_current_path.mapAll,
					positions_binary_aroundTarget.map,
					GBL_myLeek_current_path.coordinates_min.line,
					GBL_myLeek_current_path.coordinates_max.line);
				positions_map_cells = [];
				target_position_cell_ids = [];
				if (binaryMapNotEmpty(intersect_positions,
						GBL_myLeek_current_path.coordinates_min.line,
						GBL_myLeek_current_path.coordinates_max.line)) {
					positions_map_cells = convertBinaryMapToCellIdMap(
						intersect_positions,
						GBL_myLeek_current_path.coordinates_min,
						GBL_myLeek_current_path.coordinates_max);

					target_position_cell_ids = arraySort(positions_map_cells, positionsSorter(target_leek, myLeek()));
				} else {
					positions_map_cells = convertBinaryMapToCellIdMap(
						positions_binary_aroundTarget.map,
						positions_binary_aroundTarget.coordinates_min,
						positions_binary_aroundTarget.coordinates_max);
					target_position_cell_ids = arraySort(positions_map_cells, positionsSorter(target_leek, myLeek()));
					
					if (count(target_position_cell_ids) > 0) {
						isPriority = true;
						targetCell_dist = shift(target_position_cell_ids).cell_id;
						pathToTargetBinary = resolvePathBetween(myLeek().leek_cell, targetCell_dist);

						if (pathToTargetBinary !== null) {
							pathToTargetBinary.map = intersection(
								GBL_myLeek_current_path.mapAll,
								pathToTargetBinary.map,
								GBL_myLeek_current_path.coordinates_min.line,
								GBL_myLeek_current_path.coordinates_max.line);

							positions_map_cells = convertBinaryMapToCellIdMap(
								pathToTargetBinary.map,
								pathToTargetBinary.coordinates_min,
								pathToTargetBinary.coordinates_max);

							target_position_cell_ids = arraySort(positions_map_cells, _sortPositionsNearestTarget(target_leek, myLeek()));
						}
					}
				}

				target_position_cell_id = null;
				if (count(target_position_cell_ids) > 0) {
					target_position_cell_id = shift(target_position_cell_ids);
					break;
				}
			}
		}
	}

	var tactical_cell_id = (target_position_cell_id !== null) ? target_position_cell_id.cell_id : myLeek().leek_cell;
	return {
		cell_id: tactical_cell_id,
		isPriority: isPriority,
		targetCell: targetCell_dist,
		moveTo: function() {
			if (tactical_cell_id !== null && myLeek().leek_cell !== tactical_cell_id) {
				moveTowardCell(tactical_cell_id);
				myLeek().update();
			}
		}
	};
}